Analysis Algorithms
Spring 
Michelle Bergin
Week 1 HW
P 14: exercises 1.2-2, 1.2-3, Problem 1-1
P 37: exercises 2.3-1, 2.3-3, 2.3-4, 2.3-6 Problems 2-2, 2-3 clarification of problem 2-3

** 1.2-2]
    For which values of n does insertion sort beat merge sort?
    insertion O(8∙n²) and merge O(64∙nlogn)
    
    8∙8² < 64∙8log(8)
    512 < 1024
    
    8∙40² < 64∙40log(40)
    12800 < 13624.13568
    
    8∙43² < 64∙43log(43)
    14792 < 14933.08128
    
    8∙44² < 64∙44log(44)
    15488 > 15373.760512

    43

1.2-3]
    When n == 15

P 1-1]
    Comparison of running times For each function f .n/ and time t in the following table, determine the largest size n of a problem that can be solved in time t, assuming that the algorithm to solve the problem takes f .n/ microseconds.

2.3-1]
    Using Figure 2.4 as a model, illustrate the operation of merge sort on the array A <3, 41, 52, 26, 38, 57, 9, 49>
        <3, 41, 52, 26>     <38, 57, 9, 49>
        <3, 41>     <52, 26>    <38, 57>    <9, 49>
        <3>     <41>    <52>    <26>    <38>    <57>    <9>     <49>
        <3, 41>     <26, 52>    <38, 57>    <9, 49>
        <3, 26, 41, 52>     <9, 38, 49, 57>
        <3, 9, 26, 38, 41, 49, 52, 57>

2.3-3]     
            | 2             if n = 2
    T(n) = {
            | 2T(n/2) + n   if n = 2^k, for k > 1
    Inductive Hypothesis

    I will be using the inductuve hypothesis

    Proving that the T(n) second case works:
    T(2³) = 2T(2³/2) + 2³
          = 2T(4) + 8
          = 2(2T(4/2) + 4) + 8)
          = 2(2∙2 + 4) + 8
          = 2(4 + 4) + 8
          = 2(8) + 8
          = 24

    2³log(2³)
          = 8∙3
          = 24
    
    Base Case:
    T(2¹) = 2
    2log(2) = 2∙1
            = 2

    Inductive Step:
    Assume T(2^k) = 2^klog(2^k)
    then T(2^(k+1)) = 2^(k+1)log(2^(k+1))

      2T(2^(k+1)/2) + 2^(k+1)
    = 2T(2^k) + 2^(k+1)
    = 2(2^klog(2^k)) + 2^(k+1)
    = 2(2^k∙k) + 2^(k+1)
    = 2^(k+1)k + 2^(k+1)
    = 2^(k+1)(k + 1)
    = 2^(k+1)log(2^(k+1))

   2.3-4]
    Write a recurrence for the worst-case running time of this recursive version of insertion sort.
    T(n) = T(n-1) + n

2.3-6]
    Yes. I think.
       You'd have to recursively find the spot where it needs to go but then you would need to linearly move all the array elements to get the new one in place unless you have a linked list. 

** P 2-2]
    a) The loop envariant
    b) 
           | 1              if n = 1
    T(n) = { 
           | T(n - 1) + n   if n > 1

    is T(n) = n²

    T(2) = T(2 - 1) + 2
         = 

** P 2-3]
    a) O(n) from lines 1 - 3

