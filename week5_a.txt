Michelle Bergin
Analysis of Algorithms

** P 194: 8.1-4
    From what I understand based on what Sherri emailed me and with James's help The array is divided by k sub sequences. So if <A, B, C, D> and our K is 2 then <A, B> and <C, D> would be our sub sequence.
    As we sort each subsequence. Our sort will be klogk each and here is our decision tree based on the entire array based on our sub sequences. Listed are the array locations.
    If we have 6 elements in our array and K = 2
                            5:6                     a = <A, B, C, D, E, F>
                          /     \                   b = <A, B, D, C, F, E>
                        3:4     4:3                 c = <B, A, D, C, E, F>
                     /    \     /    \              d = <B, A, C, D, F, E>
                  1:2    2:1   1:2    2:1
                   |      |     |      |
                   a      b     c      d

    To get a fully sorted array we need to compare each element (n) and to finish our array based on the decision tree it will take logk times. nlogk

p 197: 8.2-4
    using the C array you can quickly find how many fall into that range by adding them all up.

P 200: 8.3-2
    Insertion Sort, Merge Sort
        4_a, 3_b, 2_c, 2_d, 1_e
        3_b, 4_a, 2_c, 2_d, 1_e
        2_c, 3_b, 4_a, 2_d, 1_e
        2_c, 2_d, 3_b, 4_a, 1_e
        1_e, 2_c, 2_d, 3_b, 4_a

        [4_a, 3_b, 2_c] [2_d, 1_e]
        [4_a, 3_b] [2_c] [2_d] [1_e]
        [4_a] [3_b] [2_c] [2_d] [1_e]
        [3_b, 4_a] [2_c, 2_d] [1_e]
        [2_c, 2_d, 3_b, 4_a] [1_e]
        [1_e, 2_c, 2_d, 3_b, 4_a]

    ???

P 204: 8.4-2
    From lines 7 and 8 from bucket sort we can see that we have an n loop incompasing another loop (insertion sort). Insertion sort takes n^2 time. I think changing that to counting sort will be better.

p 206: 8-3 or 8-4
    a.
    a. mainFunct():                                 bucketSort(A, B):
        A = all the numbers                             longest = 0
        B = array of arrays                             for n in A:
        C = nothing yet                                     if longest < len(str(n)):
        B = bucketSort(A, B)                                    longest = len(str(n))
        for each in B:                                  set B to length of longest
            radixSort(each)                             for n in A:
        for each in B:                                      B[len(str(n))].append(n)
            for n in each:                              return B
                C.append(n)

    b. You are given an array of strings, where different strings may have different numbers of characters, but the total number of characters over all the strings is n. Show how to sort the strings in O(n) time. (Note that the desired order here is the standard alphabetical order; for example, a < ab < b.)
        buffer strings with a's in the front to make them all the same size. then organize by first character going to the last. Even though I have created more characters I still believe that it is in O(n) time

        for word in wordlist:
            add a's to beginning of each word so they are all the same length
        for i in range (0, len(wordlist)):
            .... I need to think about this more


P 215: 9.1-1
    So I saw an example of this online which was a big help. How I saw the comparisons being done to find the smallest value was the same:
    A = [4, 6, 8, 2, 1, 3, 9, 0]

    Comparisons:
    [4, 6] [8, 2] [1, 3] [9, 0]
           [4, 2] [1, 0]
              [2, 0]
    This was n - 1 comparisons
    What I saw above originally was a tree, but the tree I didnt see was:
    4, 6, 8, 2, 1, 3, 9, 0
     \/    \/    \/    \/
      4,    2,    1,    0
       \   /       \   /
         2           0
          \         /
               0
    So I think the log(n) has to do with that tree?
    I suppose for a find min function you could have it return an array of sorted numbers compared to the smallest. Among them you could find it in logn.

p 219: 9.2-1
    Show that RANDOMIZED-SELECT never makes a recursive call to a 0-length array.
        if p == r return A[p]
        What is passed if your array is 0 in length? Null? None? 0?

P 223: 9.3-8
    [1,2,3][5,44,54][4,5,6]
    X[1..n], Y[1..n]
    if median(X) < median(Y)
        That would mean that all numbers X[1..median(X)] would not be the median of both arrays
        Also anything bigger than Y[median(y), end of Y] would not be a median so right now we have n elements to check but if we recursivelly did this each time we keep dividing our problem in half and assuming that n is a number that is a power of 2 you can see how the time to solve this would take logn

9.3-9
    Find the max distance (NS) of each well to other wells. find general distance of each well from each other. Then find the median of medians

    Visual example of what I am thinking:

6   U
5   |       U                       U               U
4   |       |                       |               |
3   |   U   |       U               |               |
2   |   |   |       |               |               |
1   |   |   |       |   U           |       U   U   |
0   |   |   |  U    |   |           |       |   |   |      U
    --------------------------------------------------------
    6   3   5  0    3   1           5       1   1   5      0
med 3   2   3  0    2   1           3       1   1   3      0
med 1 or 2 is where we put the pipe

p 224: 9-2
    I want to go through this together with someone I am lost by what it is saying
