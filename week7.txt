Michelle Bergin
Analysis of Algorithms
Week 7

p 311: 13.1-3
    Yes because it covers rule 1, each node needs to be either red or black
    And for rule 5 , the black height changes by +1 but it changes for ALL paths equally.

p 314: 13.2-4
    To have a right chain tree we would do right rotations on the root node until the left node is empty.

            5
        3       7
    2     4   6     9
    ----------------------------
            3
         2      5
              4     7
                  6     9
    ----------------------------
            2
                3
                    5
                  4     7
                      6     9
    ----------------------------
    Then to bring it back you would preform left rotations
    Each rotation is O(1) since all you change is pointers. So it can at most take O(n) time.

p 322: 13.3-4
    RB-INSERT-FIXUP never touches leaves. only parents and grandparents.

P 330: 13.4-6,
    I am not a hundred percent sure but I believe the sudo code is saying that if the parents left is red (which means that it's parent cant be red or it breaks the red black tree rule)

13.4-7
    I'll come back to this one.

p 592: 22.1-1,
    O(V + E)?
    same for in? It's each vertex plus each path listed for each vertex which I thought was labeled typically as E in this book

22.1-2,
            4
         /     \
       2        6
     /   \    /   \
    1     3  5     7

    1| [2]
    2| [1,3,4]
    3| [2]
    4| [2,6]
    5| [6]
    6| [4,5,7]
    7| [6]

       1 2 3 4 5 6 7
    1 |0|1|0|0|0|0|0|
    2 |1|0|1|1|0|0|0|
    3 |0|1|0|0|0|0|0|
    4 |0|1|0|0|0|1|0|
    5 |0|0|0|0|0|1|0|
    6 |0|0|0|1|1|0|1|
    7 |0|0|0|0|0|1|0|

**22.1-3
       1 2 3
    1 |0|1|1   1) [2,3]
    2 |1|0|0   2) [1]
    3 |1|0|0   3) [1]

    How to calculate the bottom half triangle.
    I am a bit confused where to start.

p 602: 22.2-2,
    I drew this all out but if we start with u then we go to:
    t, x, y Their d is (1, 1, 1)
        and their Π is (u, u, u)
    from there we expand t, x, then y but i am going to skip x and y and only demonstrate t
    expanding t we get:
    w, and x (ignoring x)
    w's d is 2 and it's Π is t
    expanding w we get s, t, x (ignoring t and x)
    s's d is 3 and it's Π is w
    expanding s we get r
    r's d is 4 and it's u is s
    expanding r we get v
    v's d is 5 and it's u is r

22.2-3,
    I don't see how. white is unexplored. if we only had on and off. on would mean to check all verticies. Maybe you could get away with not having grey? But you need a way to know when a verticy is done. So I don't see how removing line 18 is doable.

22.2-4
    I thought that BFS does run through an adjacency graphy? it would still be O(V + E) or what am I not understanding :(?

p 623: 22-3
    a) If I pull out the edges (out, in) I noticed that to accomplish the Euler tour if an edge is on the left of the pair, it has to have it's edge on the left of another pair. There can never be an odd number of edges.

                    a
                  /  |`
                 /     \
               |_       \
              b -------> c

    (a, b)
    (b, c)
    (c, a)
    If I ever add a new vertex to our strongly connected Euler tour tree then the new vertex would need to be added in at an even basis and if this affects other vertices that they too would need to be updated. For example

                    a ---------> e
                  /  |` <--------'
                 /     \
               |_       \
              b -------> c

    (a, b)
    (b, c)
    (c, a)
    (a, e)
    (e, a)

    I am not sure how to prove this but this is as far as my understanding got me.

p 629: 23.1-1
    if (u,v) is a minimum weight and overall the weight of the graph G is minimum with the edge (u,v) then it will be connected in the spanning tree.

23.1-3
    ???

23.1-7
    if a weight is negative you could possibly have a cycle and a spanning tree is acyclical.

    Example:
                        a
                   3  /   \ -10
                     /     \
                    b ----- c
                        2
    Techincally we could keep spinning in a circle getting a smaller and smaller value so our weight will always be less. This can not be put as a minimum spanning tree

p 637: 23.2-4
    Suppose that all edge weights in a graph are integers in the range from 1 to |V|. How fast can you make Kruskal's algorithm run? What if the edge weights are integers in the range from 1 to W for some constant W?
        ???

23.2-5


p 641: 23-4


p 654: 24.1-1, 24.1-3
p 657: 24.2-1, 24.2-2
p 663: 24.3-1, 24.3-3, 24.3-10
p 677: 24.5-2, 24.5-6
p 678: 24-2
